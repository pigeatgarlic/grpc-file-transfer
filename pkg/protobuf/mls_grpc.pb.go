// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: mls.proto

package mlspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MLSServiceClient is the client API for MLSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MLSServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (MLSService_UploadClient, error)
}

type mLSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMLSServiceClient(cc grpc.ClientConnInterface) MLSServiceClient {
	return &mLSServiceClient{cc}
}

func (c *mLSServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (MLSService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &MLSService_ServiceDesc.Streams[0], "/mlspb.MLSService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &mLSServiceUploadClient{stream}
	return x, nil
}

type MLSService_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type mLSServiceUploadClient struct {
	grpc.ClientStream
}

func (x *mLSServiceUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mLSServiceUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MLSServiceServer is the server API for MLSService service.
// All implementations must embed UnimplementedMLSServiceServer
// for forward compatibility
type MLSServiceServer interface {
	Upload(MLSService_UploadServer) error
	mustEmbedUnimplementedMLSServiceServer()
}

// UnimplementedMLSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMLSServiceServer struct {
}

func (UnimplementedMLSServiceServer) Upload(MLSService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedMLSServiceServer) mustEmbedUnimplementedMLSServiceServer() {}

// UnsafeMLSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MLSServiceServer will
// result in compilation errors.
type UnsafeMLSServiceServer interface {
	mustEmbedUnimplementedMLSServiceServer()
}

func RegisterMLSServiceServer(s grpc.ServiceRegistrar, srv MLSServiceServer) {
	s.RegisterService(&MLSService_ServiceDesc, srv)
}

func _MLSService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MLSServiceServer).Upload(&mLSServiceUploadServer{stream})
}

type MLSService_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type mLSServiceUploadServer struct {
	grpc.ServerStream
}

func (x *mLSServiceUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mLSServiceUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MLSService_ServiceDesc is the grpc.ServiceDesc for MLSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MLSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mlspb.MLSService",
	HandlerType: (*MLSServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _MLSService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mls.proto",
}
